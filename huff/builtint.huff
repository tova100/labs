// BUILT IN FUNCTIONS
// #__FUNC_SIG(<func_def|string>)
// At compile time, substitutes with PUSH4 function_selector (4 byte function selector
// of the passed function or string). The string must be a valid function signature
// like "test(address, uint256)".
//
// #__EVENT_HASH(<event_def|string>)
// At compile time, substitutes with PUSH32 event_hash (selector hash of the passed
// event or string). The string must be a valid event signature like "TestEvent(uint256,
// address indexed)".
//
// #__ERROR(<error_def>)
// At compile time, substitutes with PUSH32 error_selector (left-padded 4 byte error
// selector of the passed error definition).
//
// #__RIGHTPAD(<literal>)
// At compile time, substitutes with PUSH32 padded_literal (right padded version of
// the passed literal).
//
// #__codesize(MACRO|FUNCTION)
// Pushes the code size of the macro or function passed to the stack.
//
// #__tablestart(TABLE) and __tablesize(TABLE)
// Functions related to Jump Tables, described in the next section.
// Define a function
#define function test1(address, uint256) nonpayable returns (bool)
#define function test2(address, uint256) nonpayable returns (bool)

// Define an event
#define event TestEvent1(address, uint256)
#define event TestEvent2(address, uint256)

#define macro TEST1() = takes (0) returns (0) {
    0x00 0x00                // [address, uint]
    __EVENT_HASH(TestEvent1) // [sig, address, uint]
    0x00 0x00                // [mem_start, mem_end, sig, address, uint]
    log3                     // []
}

#define macro TEST2() = takes (0) returns (0) {
    0x00 0x00                // [address, uint]
    __EVENT_HASH(TestEvent2) // [sig, address, uint]
    0x00 0x00                // [mem_start, mem_end, sig, address, uint]
    log3                     // []
}

#define macro MAIN() = takes (0) returns (0) {
    // Identify which function is being called.
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(test1) eq test1 jumpi
    dup1 __FUNC_SIG(test2) eq test2 jumpi

    // Revert if no function matches
    0x00 0x00 revert

    test1:
        TEST1()

    test2:
        TEST2()
}
